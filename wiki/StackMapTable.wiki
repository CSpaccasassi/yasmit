= Introduction =

A StackMapTable is a method attribute in the Java class format that improve bytecode verification during class linking in the Java Virtual Machine. 
StackMapTables provide a form of Proof Carrying Code in Java \footnote{google for Necula's Ph.D. Thesis "Compiling with proofs" for more info on Proof Carrying Code}.

In short, they improve the Java startup phase: your .class file will be verified quicker than before (where before is prior to Java 1.6) and the verification phase will consume much less memory with StackMapTables. 
They  is achieved embedding in .class files solutions to type-equations generated by the old data-flow analysis verifier, instead of recalculating them each time you load a class.
Thus, this bonus is not automagically available. Your Java code will be faster if either:

*A) You compile your source code with a (JSR 202 compliant) compiler that supports the Java class format 50 or superior, like javac 1.6.0; or

*B) You have someone else upgrade your Java .class file without recompiling from source code.


= Details =
JSR 202 describes the new verification algorithm, split verification, in Prolog; hurray for Prolog! For the dire of heart, gory details are contained in the paper "Lightweight Bytecode Verification" by Rose and Rose [DuNno98, citeseer].